{"ast":null,"code":"var _jsxFileName = \"H:\\\\project\\\\first-project\\\\client\\\\src\\\\AddTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport axios from \"axios\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddTable = () => {\n  _s();\n  const [selectedTable, setSelectedTable] = useState(\"branch\");\n  const [formData, setFormData] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const fileInputRef = useRef(null);\n\n  // Dropdown data for cascading selects\n  const [clients, setClients] = useState([]);\n  const [circles, setCircles] = useState([]);\n  const [clusters, setClusters] = useState([]);\n\n  // Fetch clients initially (for branch, circle tables)\n  useEffect(() => {\n    const fetchClients = async () => {\n      try {\n        const clientRes = await axios.get(\"http://localhost:8888/api/tables/client\");\n        setClients(clientRes.data || []);\n      } catch (error) {\n        console.error(\"Error fetching clients:\", error);\n      }\n    };\n    fetchClients();\n  }, []);\n\n  // Fetch circles when client changes (for branch and circle tables)\n  useEffect(() => {\n    const fetchCircles = async () => {\n      if (!formData.client) {\n        setCircles([]);\n        setFormData(prev => ({\n          ...prev,\n          circle: \"\"\n        }));\n        return;\n      }\n      try {\n        const circleRes = await axios.get(`http://localhost:8888/api/tables/circle?clientId=${formData.client}`);\n        setCircles(circleRes.data || []);\n        setFormData(prev => ({\n          ...prev,\n          circle: \"\"\n        }));\n      } catch (error) {\n        console.error(\"Error fetching circles:\", error);\n      }\n    };\n    if (selectedTable === \"branch\" || selectedTable === \"circle\") {\n      fetchCircles();\n    }\n  }, [formData.client, selectedTable]);\n\n  // Fetch clusters when circle changes (for branch and cluster tables)\n  useEffect(() => {\n    const fetchClusters = async () => {\n      if (!formData.circle) {\n        setClusters([]);\n        setFormData(prev => ({\n          ...prev,\n          cluster: \"\"\n        }));\n        return;\n      }\n      try {\n        const clusterRes = await axios.get(`http://localhost:8888/api/tables/cluster?circleId=${formData.circle}`);\n        setClusters(clusterRes.data || []);\n        setFormData(prev => ({\n          ...prev,\n          cluster: \"\"\n        }));\n      } catch (error) {\n        console.error(\"Error fetching clusters:\", error);\n      }\n    };\n    if (selectedTable === \"branch\" || selectedTable === \"cluster\") {\n      fetchClusters();\n    }\n  }, [formData.circle, selectedTable]);\n  const UNIQUE_FIELDS = {\n    user: \"email\",\n    branch: \"sol_id\",\n    vehicle: \"name\",\n    custodian: \"name\",\n    driver: \"name\",\n    cluster: \"name\",\n    circle: \"name\",\n    client: \"name\"\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleTableChange = e => {\n    setSelectedTable(e.target.value);\n    setFormData({});\n    setMessage(\"\");\n    if (fileInputRef.current) {\n      fileInputRef.current.value = null;\n    }\n    // Reset dropdown data when switching tables\n    if (e.target.value !== \"branch\" && e.target.value !== \"circle\" && e.target.value !== \"cluster\") {\n      setClients([]);\n      setCircles([]);\n      setClusters([]);\n    } else {\n      // Reload clients when switching back to branch or circle or cluster\n      axios.get(\"http://localhost:8888/api/tables/client\").then(res => {\n        setClients(res.data || []);\n      });\n    }\n  };\n  const getFieldsForTable = () => {\n    switch (selectedTable) {\n      case \"user\":\n        return [\"name\", \"email\", \"password\", \"confirm_password\", \"role\"];\n      case \"branch\":\n        return [\"sol_id\", \"branch_name\", \"client\", \"circle\", \"cluster\"];\n      case \"circle\":\n        return [\"name\", \"client\"];\n      case \"cluster\":\n        return [\"name\", \"circle\"];\n      case \"vehicle\":\n      case \"custodian\":\n      case \"driver\":\n      case \"client\":\n        return [\"name\"];\n      default:\n        return [];\n    }\n  };\n\n  // File reading helper\n  const readFileAsArrayBuffer = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(reader.error);\n      try {\n        reader.readAsArrayBuffer(file);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  };\n  const handleSubmit = async () => {\n    try {\n      var _fileInputRef$current, _fileInputRef$current2;\n      setMessage(\"\");\n      const fileFromInput = (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : (_fileInputRef$current2 = _fileInputRef$current.files) === null || _fileInputRef$current2 === void 0 ? void 0 : _fileInputRef$current2[0];\n      if (fileFromInput) {\n        var _response$data;\n        // File upload logic\n        let data;\n        try {\n          data = await readFileAsArrayBuffer(fileFromInput);\n        } catch (e) {\n          console.error(\"File reading error:\", e);\n          setMessage(\"File could not be read. Please reselect the file.\");\n          return;\n        }\n        const workbook = XLSX.read(data, {\n          type: \"array\"\n        });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const json = XLSX.utils.sheet_to_json(worksheet);\n        const uniqueField = UNIQUE_FIELDS[selectedTable];\n        const uniqueValues = new Set();\n        const filteredRows = [];\n        const duplicateRows = [];\n        for (const row of json) {\n          const key = row[uniqueField];\n          if (key == null || key === \"\") {\n            duplicateRows.push({\n              reason: `Missing ${uniqueField}`,\n              row\n            });\n          } else if (uniqueValues.has(key)) {\n            duplicateRows.push({\n              reason: `Duplicate in file: ${key}`,\n              row\n            });\n          } else {\n            uniqueValues.add(key);\n            filteredRows.push(row);\n          }\n        }\n        if (filteredRows.length === 0) {\n          setMessage(\"No valid rows found in file. All are missing or duplicate.\");\n          return;\n        }\n        const formDataFile = new FormData();\n        formDataFile.append(\"file\", fileFromInput);\n        formDataFile.append(\"table\", selectedTable);\n        const response = await axios.post(\"http://localhost:8888/api/upload-file\", formDataFile, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.inserted) > 0) {\n          setMessage(`${response.data.inserted} rows inserted successfully.` + (duplicateRows.length ? ` ${duplicateRows.length} duplicate rows were skipped.` : \"\"));\n        } else {\n          setMessage(\"No rows inserted. All rows might be duplicates.\");\n        }\n        return;\n      }\n\n      // Manual form entry validation\n      const uniqueKey = UNIQUE_FIELDS[selectedTable];\n      if (!formData[uniqueKey]) {\n        setMessage(`Please enter ${uniqueKey}`);\n        return;\n      }\n      if (selectedTable === \"user\") {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!formData.email || !emailRegex.test(formData.email)) {\n          setMessage(\"Please enter a valid email address.\");\n          return;\n        }\n        if (!formData.password || !formData.confirm_password) {\n          setMessage(\"Please enter password and confirm password.\");\n          return;\n        }\n        if (formData.password !== formData.confirm_password) {\n          setMessage(\"Password and confirm password do not match.\");\n          return;\n        }\n        if (!formData.role) {\n          setMessage(\"Please select a role.\");\n          return;\n        }\n      }\n      if (selectedTable === \"branch\") {\n        if (!formData.client) {\n          setMessage(\"Please select Client\");\n          return;\n        }\n        if (!formData.circle) {\n          setMessage(\"Please select Circle\");\n          return;\n        }\n        if (!formData.cluster) {\n          setMessage(\"Please select Cluster\");\n          return;\n        }\n      }\n      if (selectedTable === \"circle\") {\n        if (!formData.client) {\n          setMessage(\"Please select Client\");\n          return;\n        }\n      }\n      if (selectedTable === \"cluster\") {\n        if (!formData.circle) {\n          setMessage(\"Please select Circle\");\n          return;\n        }\n      }\n\n      // Prepare data to send\n      let dataToSend = {\n        ...formData\n      };\n      if (selectedTable === \"branch\") {\n        var _formData$sol_id, _formData$branch_name;\n        dataToSend = {\n          sol_id: (_formData$sol_id = formData.sol_id) === null || _formData$sol_id === void 0 ? void 0 : _formData$sol_id.trim(),\n          branch_name: (_formData$branch_name = formData.branch_name) === null || _formData$branch_name === void 0 ? void 0 : _formData$branch_name.trim(),\n          client: formData.client,\n          circle: formData.circle,\n          cluster: formData.cluster\n        };\n      } else if (selectedTable === \"circle\") {\n        var _formData$name;\n        dataToSend = {\n          name: (_formData$name = formData.name) === null || _formData$name === void 0 ? void 0 : _formData$name.trim(),\n          client: formData.client\n        };\n      } else if (selectedTable === \"cluster\") {\n        var _formData$name2;\n        dataToSend = {\n          name: (_formData$name2 = formData.name) === null || _formData$name2 === void 0 ? void 0 : _formData$name2.trim(),\n          circle: formData.circle\n        };\n      } else if (selectedTable === \"user\") {\n        dataToSend = {\n          ...formData\n        };\n        delete dataToSend.confirm_password;\n      }\n      const response = await axios.post(\"http://localhost:8888/api/add-entry\", {\n        table: selectedTable,\n        data: dataToSend\n      });\n      if (response.data.success) {\n        setMessage(\"Entry added successfully.\");\n        setFormData({});\n        if (fileInputRef.current) {\n          fileInputRef.current.value = null;\n        }\n      } else if (response.data.duplicate) {\n        setMessage(`Duplicate entry for ${uniqueKey}: ${formData[uniqueKey]}`);\n      } else {\n        setMessage(\"Failed to add entry.\");\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Submit Error:\", err);\n      setMessage((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Unexpected error occurred while submitting.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"600px\",\n      margin: \"20px auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Data to Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Choose Table:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedTable,\n        onChange: handleTableChange,\n        style: {\n          marginLeft: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"user\",\n          children: \"User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"branch\",\n          children: \"Branch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"vehicle\",\n          children: \"Vehicle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"custodian\",\n          children: \"Custodian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"driver\",\n          children: \"Driver\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cluster\",\n          children: \"Cluster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"circle\",\n          children: \"Circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"client\",\n          children: \"Client\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Manual Entry:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), getFieldsForTable().map(field => {\n        // User special cases\n        if (selectedTable === \"user\") {\n          if (field === \"role\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [field, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"role\",\n                value: formData.role || \"\",\n                onChange: handleInputChange,\n                style: {\n                  width: \"100%\",\n                  padding: 6\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Role\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"admin\",\n                  children: \"Admin\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"manager\",\n                  children: \"Manager\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"user\",\n                  children: \"User\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 19\n              }, this)]\n            }, field, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this);\n          } else if (field === \"password\" || field === \"confirm_password\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [field.replace(\"_\", \" \"), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                name: field,\n                value: formData[field] || \"\",\n                onChange: handleInputChange,\n                style: {\n                  width: \"100%\",\n                  padding: 6\n                },\n                autoComplete: \"new-password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this)]\n            }, field, true, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [field, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: field,\n                value: formData[field] || \"\",\n                onChange: handleInputChange,\n                style: {\n                  width: \"100%\",\n                  padding: 6\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 19\n              }, this)]\n            }, field, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this);\n          }\n        }\n\n        // Branch special handling\n        if (selectedTable === \"branch\") {\n          if (field === \"client\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [field, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"client\",\n                value: formData.client || \"\",\n                onChange: handleInputChange,\n                style: {\n                  width: \"100%\",\n                  padding: 6\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Client\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 21\n                }, this), clients.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: c._id,\n                  children: c.name\n                }, c._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 19\n              }, this)]\n            }, field, true, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 17\n            }, this);\n          } else if (field === \"circle\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [field, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"circle\",\n                value: formData.circle || \"\",\n                onChange: handleInputChange,\n                disabled: !formData.client,\n                style: {\n                  width: \"100%\",\n                  padding: 6\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Circle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 21\n                }, this), circles.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: c._id,\n                  children: c.name\n                }, c._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 434,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 19\n              }, this)]\n            }, field, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 17\n            }, this);\n          } else if (field === \"cluster\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [field, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"cluster\",\n                value: formData.cluster || \"\",\n                onChange: handleInputChange,\n                disabled: !formData.circle,\n                style: {\n                  width: \"100%\",\n                  padding: 6\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Cluster\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 21\n                }, this), clusters.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: c._id,\n                  children: c.name\n                }, c._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 19\n              }, this)]\n            }, field, true, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 17\n            }, this);\n          } else {\n            // sol_id, branch_name inputs\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [field, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: field,\n                value: formData[field] || \"\",\n                onChange: handleInputChange,\n                style: {\n                  width: \"100%\",\n                  padding: 6\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 19\n              }, this)]\n            }, field, true, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 17\n            }, this);\n          }\n        }\n\n        // Circle table with client dropdown\n        if (selectedTable === \"circle\" && field === \"client\") {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: \"10px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [field, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"client\",\n              value: formData.client || \"\",\n              onChange: handleInputChange,\n              style: {\n                width: \"100%\",\n                padding: 6\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Client\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 19\n              }, this), clients.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: c._id,\n                children: c.name\n              }, c._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 17\n            }, this)]\n          }, field, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this);\n        }\n\n        // Cluster table with circle dropdown\n        if (selectedTable === \"cluster\" && field === \"circle\") {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: \"10px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [field, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"circle\",\n              value: formData.circle || \"\",\n              onChange: handleInputChange,\n              style: {\n                width: \"100%\",\n                padding: 6\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 19\n              }, this), circles.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: c._id,\n                children: c.name\n              }, c._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 17\n            }, this)]\n          }, field, true, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 15\n          }, this);\n        }\n\n        // Default text input for other tables\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [field, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: field,\n            value: formData[field] || \"\",\n            onChange: handleInputChange,\n            style: {\n              width: \"100%\",\n              padding: 6\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 15\n          }, this)]\n        }, field, true, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      style: {\n        marginTop: \"10px\",\n        padding: \"10px 16px\",\n        backgroundColor: \"#007bff\",\n        color: \"white\",\n        border: \"none\",\n        borderRadius: 6,\n        cursor: \"pointer\"\n      },\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        margin: \"20px 0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"OR Upload Excel File:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".xlsx, .xls\",\n        ref: fileInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        style: {\n          marginTop: \"10px\",\n          padding: \"10px 16px\",\n          backgroundColor: \"#28a745\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: 6,\n          cursor: \"pointer\"\n        },\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: \"20px\",\n        color: message.startsWith(\"Failed\") || message.startsWith(\"Please\") ? \"red\" : \"green\"\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 5\n  }, this);\n};\n_s(AddTable, \"fw4kcXIXAiEQujYzkGHkDm7JbSs=\");\n_c = AddTable;\nexport default AddTable;\nvar _c;\n$RefreshReg$(_c, \"AddTable\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","XLSX","jsxDEV","_jsxDEV","AddTable","_s","selectedTable","setSelectedTable","formData","setFormData","message","setMessage","fileInputRef","clients","setClients","circles","setCircles","clusters","setClusters","fetchClients","clientRes","get","data","error","console","fetchCircles","client","prev","circle","circleRes","fetchClusters","cluster","clusterRes","UNIQUE_FIELDS","user","branch","vehicle","custodian","driver","handleInputChange","e","name","value","target","handleTableChange","current","then","res","getFieldsForTable","readFileAsArrayBuffer","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","err","handleSubmit","_fileInputRef$current","_fileInputRef$current2","fileFromInput","files","_response$data","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","json","utils","sheet_to_json","uniqueField","uniqueValues","Set","filteredRows","duplicateRows","row","key","push","reason","has","add","length","formDataFile","FormData","append","response","post","headers","inserted","uniqueKey","emailRegex","email","test","password","confirm_password","role","dataToSend","_formData$sol_id","_formData$branch_name","sol_id","trim","branch_name","_formData$name","_formData$name2","table","success","duplicate","_err$response","_err$response$data","style","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","marginLeft","marginTop","map","field","marginBottom","width","padding","replace","autoComplete","c","_id","disabled","onClick","backgroundColor","color","border","borderRadius","cursor","accept","ref","startsWith","_c","$RefreshReg$"],"sources":["H:/project/first-project/client/src/AddTable.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst AddTable = () => {\r\n  const [selectedTable, setSelectedTable] = useState(\"branch\");\r\n  const [formData, setFormData] = useState({});\r\n  const [message, setMessage] = useState(\"\");\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Dropdown data for cascading selects\r\n  const [clients, setClients] = useState([]);\r\n  const [circles, setCircles] = useState([]);\r\n  const [clusters, setClusters] = useState([]);\r\n\r\n  // Fetch clients initially (for branch, circle tables)\r\n  useEffect(() => {\r\n    const fetchClients = async () => {\r\n      try {\r\n        const clientRes = await axios.get(\"http://localhost:8888/api/tables/client\");\r\n        setClients(clientRes.data || []);\r\n      } catch (error) {\r\n        console.error(\"Error fetching clients:\", error);\r\n      }\r\n    };\r\n    fetchClients();\r\n  }, []);\r\n\r\n  // Fetch circles when client changes (for branch and circle tables)\r\n  useEffect(() => {\r\n    const fetchCircles = async () => {\r\n      if (!formData.client) {\r\n        setCircles([]);\r\n        setFormData((prev) => ({ ...prev, circle: \"\" }));\r\n        return;\r\n      }\r\n      try {\r\n        const circleRes = await axios.get(\r\n          `http://localhost:8888/api/tables/circle?clientId=${formData.client}`\r\n        );\r\n        setCircles(circleRes.data || []);\r\n        setFormData((prev) => ({ ...prev, circle: \"\" }));\r\n      } catch (error) {\r\n        console.error(\"Error fetching circles:\", error);\r\n      }\r\n    };\r\n\r\n    if (selectedTable === \"branch\" || selectedTable === \"circle\") {\r\n      fetchCircles();\r\n    }\r\n  }, [formData.client, selectedTable]);\r\n\r\n  // Fetch clusters when circle changes (for branch and cluster tables)\r\n  useEffect(() => {\r\n    const fetchClusters = async () => {\r\n      if (!formData.circle) {\r\n        setClusters([]);\r\n        setFormData((prev) => ({ ...prev, cluster: \"\" }));\r\n        return;\r\n      }\r\n      try {\r\n        const clusterRes = await axios.get(\r\n          `http://localhost:8888/api/tables/cluster?circleId=${formData.circle}`\r\n        );\r\n        setClusters(clusterRes.data || []);\r\n        setFormData((prev) => ({ ...prev, cluster: \"\" }));\r\n      } catch (error) {\r\n        console.error(\"Error fetching clusters:\", error);\r\n      }\r\n    };\r\n\r\n    if (selectedTable === \"branch\" || selectedTable === \"cluster\") {\r\n      fetchClusters();\r\n    }\r\n  }, [formData.circle, selectedTable]);\r\n\r\n  const UNIQUE_FIELDS = {\r\n    user: \"email\",\r\n    branch: \"sol_id\",\r\n    vehicle: \"name\",\r\n    custodian: \"name\",\r\n    driver: \"name\",\r\n    cluster: \"name\",\r\n    circle: \"name\",\r\n    client: \"name\",\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleTableChange = (e) => {\r\n    setSelectedTable(e.target.value);\r\n    setFormData({});\r\n    setMessage(\"\");\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = null;\r\n    }\r\n    // Reset dropdown data when switching tables\r\n    if (e.target.value !== \"branch\" && e.target.value !== \"circle\" && e.target.value !== \"cluster\") {\r\n      setClients([]);\r\n      setCircles([]);\r\n      setClusters([]);\r\n    } else {\r\n      // Reload clients when switching back to branch or circle or cluster\r\n      axios.get(\"http://localhost:8888/api/tables/client\").then((res) => {\r\n        setClients(res.data || []);\r\n      });\r\n    }\r\n  };\r\n\r\n  const getFieldsForTable = () => {\r\n    switch (selectedTable) {\r\n      case \"user\":\r\n        return [\"name\", \"email\", \"password\", \"confirm_password\", \"role\"];\r\n      case \"branch\":\r\n        return [\"sol_id\", \"branch_name\", \"client\", \"circle\", \"cluster\"];\r\n      case \"circle\":\r\n        return [\"name\", \"client\"];\r\n      case \"cluster\":\r\n        return [\"name\", \"circle\"];\r\n      case \"vehicle\":\r\n      case \"custodian\":\r\n      case \"driver\":\r\n      case \"client\":\r\n        return [\"name\"];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  // File reading helper\r\n  const readFileAsArrayBuffer = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = () => reject(reader.error);\r\n      try {\r\n        reader.readAsArrayBuffer(file);\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      setMessage(\"\");\r\n\r\n      const fileFromInput = fileInputRef.current?.files?.[0];\r\n\r\n      if (fileFromInput) {\r\n        // File upload logic\r\n        let data;\r\n        try {\r\n          data = await readFileAsArrayBuffer(fileFromInput);\r\n        } catch (e) {\r\n          console.error(\"File reading error:\", e);\r\n          setMessage(\"File could not be read. Please reselect the file.\");\r\n          return;\r\n        }\r\n\r\n        const workbook = XLSX.read(data, { type: \"array\" });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const json = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n        const uniqueField = UNIQUE_FIELDS[selectedTable];\r\n        const uniqueValues = new Set();\r\n        const filteredRows = [];\r\n        const duplicateRows = [];\r\n\r\n        for (const row of json) {\r\n          const key = row[uniqueField];\r\n          if (key == null || key === \"\") {\r\n            duplicateRows.push({ reason: `Missing ${uniqueField}`, row });\r\n          } else if (uniqueValues.has(key)) {\r\n            duplicateRows.push({ reason: `Duplicate in file: ${key}`, row });\r\n          } else {\r\n            uniqueValues.add(key);\r\n            filteredRows.push(row);\r\n          }\r\n        }\r\n\r\n        if (filteredRows.length === 0) {\r\n          setMessage(\"No valid rows found in file. All are missing or duplicate.\");\r\n          return;\r\n        }\r\n\r\n        const formDataFile = new FormData();\r\n        formDataFile.append(\"file\", fileFromInput);\r\n        formDataFile.append(\"table\", selectedTable);\r\n\r\n        const response = await axios.post(\r\n          \"http://localhost:8888/api/upload-file\",\r\n          formDataFile,\r\n          {\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          }\r\n        );\r\n\r\n        if (response.data?.inserted > 0) {\r\n          setMessage(\r\n            `${response.data.inserted} rows inserted successfully.` +\r\n              (duplicateRows.length\r\n                ? ` ${duplicateRows.length} duplicate rows were skipped.`\r\n                : \"\")\r\n          );\r\n        } else {\r\n          setMessage(\"No rows inserted. All rows might be duplicates.\");\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      // Manual form entry validation\r\n      const uniqueKey = UNIQUE_FIELDS[selectedTable];\r\n\r\n      if (!formData[uniqueKey]) {\r\n        setMessage(`Please enter ${uniqueKey}`);\r\n        return;\r\n      }\r\n\r\n      if (selectedTable === \"user\") {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!formData.email || !emailRegex.test(formData.email)) {\r\n          setMessage(\"Please enter a valid email address.\");\r\n          return;\r\n        }\r\n        if (!formData.password || !formData.confirm_password) {\r\n          setMessage(\"Please enter password and confirm password.\");\r\n          return;\r\n        }\r\n        if (formData.password !== formData.confirm_password) {\r\n          setMessage(\"Password and confirm password do not match.\");\r\n          return;\r\n        }\r\n        if (!formData.role) {\r\n          setMessage(\"Please select a role.\");\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (selectedTable === \"branch\") {\r\n        if (!formData.client) {\r\n          setMessage(\"Please select Client\");\r\n          return;\r\n        }\r\n        if (!formData.circle) {\r\n          setMessage(\"Please select Circle\");\r\n          return;\r\n        }\r\n        if (!formData.cluster) {\r\n          setMessage(\"Please select Cluster\");\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (selectedTable === \"circle\") {\r\n        if (!formData.client) {\r\n          setMessage(\"Please select Client\");\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (selectedTable === \"cluster\") {\r\n        if (!formData.circle) {\r\n          setMessage(\"Please select Circle\");\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Prepare data to send\r\n      let dataToSend = { ...formData };\r\n\r\n      if (selectedTable === \"branch\") {\r\n        dataToSend = {\r\n          sol_id: formData.sol_id?.trim(),\r\n          branch_name: formData.branch_name?.trim(),\r\n          client: formData.client,\r\n          circle: formData.circle,\r\n          cluster: formData.cluster,\r\n        };\r\n      } else if (selectedTable === \"circle\") {\r\n        dataToSend = {\r\n          name: formData.name?.trim(),\r\n          client: formData.client,\r\n        };\r\n      } else if (selectedTable === \"cluster\") {\r\n        dataToSend = {\r\n          name: formData.name?.trim(),\r\n          circle: formData.circle,\r\n        };\r\n      } else if (selectedTable === \"user\") {\r\n        dataToSend = { ...formData };\r\n        delete dataToSend.confirm_password;\r\n      }\r\n\r\n      const response = await axios.post(\"http://localhost:8888/api/add-entry\", {\r\n        table: selectedTable,\r\n        data: dataToSend,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setMessage(\"Entry added successfully.\");\r\n        setFormData({});\r\n        if (fileInputRef.current) {\r\n          fileInputRef.current.value = null;\r\n        }\r\n      } else if (response.data.duplicate) {\r\n        setMessage(`Duplicate entry for ${uniqueKey}: ${formData[uniqueKey]}`);\r\n      } else {\r\n        setMessage(\"Failed to add entry.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Submit Error:\", err);\r\n      setMessage(\r\n        err?.response?.data?.message ||\r\n          \"Unexpected error occurred while submitting.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: \"600px\", margin: \"20px auto\" }}>\r\n      <h2>Add Data to Table</h2>\r\n\r\n      <label>\r\n        Choose Table:\r\n        <select\r\n          value={selectedTable}\r\n          onChange={handleTableChange}\r\n          style={{ marginLeft: 10 }}\r\n        >\r\n          <option value=\"user\">User</option>\r\n          <option value=\"branch\">Branch</option>\r\n          <option value=\"vehicle\">Vehicle</option>\r\n          <option value=\"custodian\">Custodian</option>\r\n          <option value=\"driver\">Driver</option>\r\n          <option value=\"cluster\">Cluster</option>\r\n          <option value=\"circle\">Circle</option>\r\n          <option value=\"client\">Client</option>\r\n        </select>\r\n      </label>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <h4>Manual Entry:</h4>\r\n\r\n        {getFieldsForTable().map((field) => {\r\n          // User special cases\r\n          if (selectedTable === \"user\") {\r\n            if (field === \"role\") {\r\n              return (\r\n                <div key={field} style={{ marginBottom: \"10px\" }}>\r\n                  <label>{field}:</label>\r\n                  <select\r\n                    name=\"role\"\r\n                    value={formData.role || \"\"}\r\n                    onChange={handleInputChange}\r\n                    style={{ width: \"100%\", padding: 6 }}\r\n                  >\r\n                    <option value=\"\">Select Role</option>\r\n                    <option value=\"admin\">Admin</option>\r\n                    <option value=\"manager\">Manager</option>\r\n                    <option value=\"user\">User</option>\r\n                  </select>\r\n                </div>\r\n              );\r\n            } else if (field === \"password\" || field === \"confirm_password\") {\r\n              return (\r\n                <div key={field} style={{ marginBottom: \"10px\" }}>\r\n                  <label>{field.replace(\"_\", \" \")}:</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    name={field}\r\n                    value={formData[field] || \"\"}\r\n                    onChange={handleInputChange}\r\n                    style={{ width: \"100%\", padding: 6 }}\r\n                    autoComplete=\"new-password\"\r\n                  />\r\n                </div>\r\n              );\r\n            } else {\r\n              return (\r\n                <div key={field} style={{ marginBottom: \"10px\" }}>\r\n                  <label>{field}:</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name={field}\r\n                    value={formData[field] || \"\"}\r\n                    onChange={handleInputChange}\r\n                    style={{ width: \"100%\", padding: 6 }}\r\n                  />\r\n                </div>\r\n              );\r\n            }\r\n          }\r\n\r\n          // Branch special handling\r\n          if (selectedTable === \"branch\") {\r\n            if (field === \"client\") {\r\n              return (\r\n                <div key={field} style={{ marginBottom: \"10px\" }}>\r\n                  <label>{field}:</label>\r\n                  <select\r\n                    name=\"client\"\r\n                    value={formData.client || \"\"}\r\n                    onChange={handleInputChange}\r\n                    style={{ width: \"100%\", padding: 6 }}\r\n                  >\r\n                    <option value=\"\">Select Client</option>\r\n                    {clients.map((c) => (\r\n                      <option key={c._id} value={c._id}>\r\n                        {c.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              );\r\n            } else if (field === \"circle\") {\r\n              return (\r\n                <div key={field} style={{ marginBottom: \"10px\" }}>\r\n                  <label>{field}:</label>\r\n                  <select\r\n                    name=\"circle\"\r\n                    value={formData.circle || \"\"}\r\n                    onChange={handleInputChange}\r\n                    disabled={!formData.client}\r\n                    style={{ width: \"100%\", padding: 6 }}\r\n                  >\r\n                    <option value=\"\">Select Circle</option>\r\n                    {circles.map((c) => (\r\n                      <option key={c._id} value={c._id}>\r\n                        {c.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              );\r\n            } else if (field === \"cluster\") {\r\n              return (\r\n                <div key={field} style={{ marginBottom: \"10px\" }}>\r\n                  <label>{field}:</label>\r\n                  <select\r\n                    name=\"cluster\"\r\n                    value={formData.cluster || \"\"}\r\n                    onChange={handleInputChange}\r\n                    disabled={!formData.circle}\r\n                    style={{ width: \"100%\", padding: 6 }}\r\n                  >\r\n                    <option value=\"\">Select Cluster</option>\r\n                    {clusters.map((c) => (\r\n                      <option key={c._id} value={c._id}>\r\n                        {c.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              );\r\n            } else {\r\n              // sol_id, branch_name inputs\r\n              return (\r\n                <div key={field} style={{ marginBottom: \"10px\" }}>\r\n                  <label>{field}:</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name={field}\r\n                    value={formData[field] || \"\"}\r\n                    onChange={handleInputChange}\r\n                    style={{ width: \"100%\", padding: 6 }}\r\n                  />\r\n                </div>\r\n              );\r\n            }\r\n          }\r\n\r\n          // Circle table with client dropdown\r\n          if (selectedTable === \"circle\" && field === \"client\") {\r\n            return (\r\n              <div key={field} style={{ marginBottom: \"10px\" }}>\r\n                <label>{field}:</label>\r\n                <select\r\n                  name=\"client\"\r\n                  value={formData.client || \"\"}\r\n                  onChange={handleInputChange}\r\n                  style={{ width: \"100%\", padding: 6 }}\r\n                >\r\n                  <option value=\"\">Select Client</option>\r\n                  {clients.map((c) => (\r\n                    <option key={c._id} value={c._id}>\r\n                      {c.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            );\r\n          }\r\n\r\n          // Cluster table with circle dropdown\r\n          if (selectedTable === \"cluster\" && field === \"circle\") {\r\n            return (\r\n              <div key={field} style={{ marginBottom: \"10px\" }}>\r\n                <label>{field}:</label>\r\n                <select\r\n                  name=\"circle\"\r\n                  value={formData.circle || \"\"}\r\n                  onChange={handleInputChange}\r\n                  style={{ width: \"100%\", padding: 6 }}\r\n                >\r\n                  <option value=\"\">Select Circle</option>\r\n                  {circles.map((c) => (\r\n                    <option key={c._id} value={c._id}>\r\n                      {c.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            );\r\n          }\r\n\r\n          // Default text input for other tables\r\n          return (\r\n            <div key={field} style={{ marginBottom: \"10px\" }}>\r\n              <label>{field}:</label>\r\n              <input\r\n                type=\"text\"\r\n                name={field}\r\n                value={formData[field] || \"\"}\r\n                onChange={handleInputChange}\r\n                style={{ width: \"100%\", padding: 6 }}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <button\r\n        onClick={handleSubmit}\r\n        style={{\r\n          marginTop: \"10px\",\r\n          padding: \"10px 16px\",\r\n          backgroundColor: \"#007bff\",\r\n          color: \"white\",\r\n          border: \"none\",\r\n          borderRadius: 6,\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        Submit\r\n      </button>\r\n\r\n      <hr style={{ margin: \"20px 0\" }} />\r\n\r\n      <div>\r\n        <h4>OR Upload Excel File:</h4>\r\n        <input type=\"file\" accept=\".xlsx, .xls\" ref={fileInputRef} />\r\n        <button\r\n          onClick={handleSubmit}\r\n          style={{\r\n            marginTop: \"10px\",\r\n            padding: \"10px 16px\",\r\n            backgroundColor: \"#28a745\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            borderRadius: 6,\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          Upload\r\n        </button>\r\n      </div>\r\n\r\n      {message && (\r\n        <p\r\n          style={{\r\n            marginTop: \"20px\",\r\n            color:\r\n              message.startsWith(\"Failed\") || message.startsWith(\"Please\")\r\n                ? \"red\"\r\n                : \"green\",\r\n          }}\r\n        >\r\n          {message}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTable;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,QAAQ,CAAC;EAC5D,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMe,YAAY,GAAGd,MAAM,CAAC,IAAI,CAAC;;EAEjC;EACA,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAE,SAAS,CAAC,MAAM;IACd,MAAMoB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,SAAS,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAAC,yCAAyC,CAAC;QAC5EP,UAAU,CAACM,SAAS,CAACE,IAAI,IAAI,EAAE,CAAC;MAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IACDJ,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACApB,SAAS,CAAC,MAAM;IACd,MAAM0B,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACjB,QAAQ,CAACkB,MAAM,EAAE;QACpBV,UAAU,CAAC,EAAE,CAAC;QACdP,WAAW,CAAEkB,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAEC,MAAM,EAAE;QAAG,CAAC,CAAC,CAAC;QAChD;MACF;MACA,IAAI;QACF,MAAMC,SAAS,GAAG,MAAM7B,KAAK,CAACqB,GAAG,CAC/B,oDAAoDb,QAAQ,CAACkB,MAAM,EACrE,CAAC;QACDV,UAAU,CAACa,SAAS,CAACP,IAAI,IAAI,EAAE,CAAC;QAChCb,WAAW,CAAEkB,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAEC,MAAM,EAAE;QAAG,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC,OAAOL,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAED,IAAIjB,aAAa,KAAK,QAAQ,IAAIA,aAAa,KAAK,QAAQ,EAAE;MAC5DmB,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACjB,QAAQ,CAACkB,MAAM,EAAEpB,aAAa,CAAC,CAAC;;EAEpC;EACAP,SAAS,CAAC,MAAM;IACd,MAAM+B,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI,CAACtB,QAAQ,CAACoB,MAAM,EAAE;QACpBV,WAAW,CAAC,EAAE,CAAC;QACfT,WAAW,CAAEkB,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAEI,OAAO,EAAE;QAAG,CAAC,CAAC,CAAC;QACjD;MACF;MACA,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMhC,KAAK,CAACqB,GAAG,CAChC,qDAAqDb,QAAQ,CAACoB,MAAM,EACtE,CAAC;QACDV,WAAW,CAACc,UAAU,CAACV,IAAI,IAAI,EAAE,CAAC;QAClCb,WAAW,CAAEkB,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAEI,OAAO,EAAE;QAAG,CAAC,CAAC,CAAC;MACnD,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED,IAAIjB,aAAa,KAAK,QAAQ,IAAIA,aAAa,KAAK,SAAS,EAAE;MAC7DwB,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACtB,QAAQ,CAACoB,MAAM,EAAEtB,aAAa,CAAC,CAAC;EAEpC,MAAM2B,aAAa,GAAG;IACpBC,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE,MAAM;IACfC,SAAS,EAAE,MAAM;IACjBC,MAAM,EAAE,MAAM;IACdP,OAAO,EAAE,MAAM;IACfH,MAAM,EAAE,MAAM;IACdF,MAAM,EAAE;EACV,CAAC;EAED,MAAMa,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChClC,WAAW,CAAEkB,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACc,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EACrD,CAAC;EAED,MAAME,iBAAiB,GAAIJ,CAAC,IAAK;IAC/BjC,gBAAgB,CAACiC,CAAC,CAACG,MAAM,CAACD,KAAK,CAAC;IAChCjC,WAAW,CAAC,CAAC,CAAC,CAAC;IACfE,UAAU,CAAC,EAAE,CAAC;IACd,IAAIC,YAAY,CAACiC,OAAO,EAAE;MACxBjC,YAAY,CAACiC,OAAO,CAACH,KAAK,GAAG,IAAI;IACnC;IACA;IACA,IAAIF,CAAC,CAACG,MAAM,CAACD,KAAK,KAAK,QAAQ,IAAIF,CAAC,CAACG,MAAM,CAACD,KAAK,KAAK,QAAQ,IAAIF,CAAC,CAACG,MAAM,CAACD,KAAK,KAAK,SAAS,EAAE;MAC9F5B,UAAU,CAAC,EAAE,CAAC;MACdE,UAAU,CAAC,EAAE,CAAC;MACdE,WAAW,CAAC,EAAE,CAAC;IACjB,CAAC,MAAM;MACL;MACAlB,KAAK,CAACqB,GAAG,CAAC,yCAAyC,CAAC,CAACyB,IAAI,CAAEC,GAAG,IAAK;QACjEjC,UAAU,CAACiC,GAAG,CAACzB,IAAI,IAAI,EAAE,CAAC;MAC5B,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAM0B,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,QAAQ1C,aAAa;MACnB,KAAK,MAAM;QACT,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,CAAC;MAClE,KAAK,QAAQ;QACX,OAAO,CAAC,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC;MACjE,KAAK,QAAQ;QACX,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC;MAC3B,KAAK,SAAS;QACZ,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC;MAC3B,KAAK,SAAS;MACd,KAAK,WAAW;MAChB,KAAK,QAAQ;MACb,KAAK,QAAQ;QACX,OAAO,CAAC,MAAM,CAAC;MACjB;QACE,OAAO,EAAE;IACb;EACF,CAAC;;EAED;EACA,MAAM2C,qBAAqB,GAAIC,IAAI,IAAK;IACtC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAMJ,OAAO,CAACE,MAAM,CAACG,MAAM,CAAC;MAC5CH,MAAM,CAACI,OAAO,GAAG,MAAML,MAAM,CAACC,MAAM,CAAC/B,KAAK,CAAC;MAC3C,IAAI;QACF+B,MAAM,CAACK,iBAAiB,CAACT,IAAI,CAAC;MAChC,CAAC,CAAC,OAAOU,GAAG,EAAE;QACZP,MAAM,CAACO,GAAG,CAAC;MACb;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MACFpD,UAAU,CAAC,EAAE,CAAC;MAEd,MAAMqD,aAAa,IAAAF,qBAAA,GAAGlD,YAAY,CAACiC,OAAO,cAAAiB,qBAAA,wBAAAC,sBAAA,GAApBD,qBAAA,CAAsBG,KAAK,cAAAF,sBAAA,uBAA3BA,sBAAA,CAA8B,CAAC,CAAC;MAEtD,IAAIC,aAAa,EAAE;QAAA,IAAAE,cAAA;QACjB;QACA,IAAI5C,IAAI;QACR,IAAI;UACFA,IAAI,GAAG,MAAM2B,qBAAqB,CAACe,aAAa,CAAC;QACnD,CAAC,CAAC,OAAOxB,CAAC,EAAE;UACVhB,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEiB,CAAC,CAAC;UACvC7B,UAAU,CAAC,mDAAmD,CAAC;UAC/D;QACF;QAEA,MAAMwD,QAAQ,GAAGlE,IAAI,CAACmE,IAAI,CAAC9C,IAAI,EAAE;UAAE+C,IAAI,EAAE;QAAQ,CAAC,CAAC;QACnD,MAAMC,SAAS,GAAGH,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;QACxC,MAAMC,SAAS,GAAGL,QAAQ,CAACM,MAAM,CAACH,SAAS,CAAC;QAC5C,MAAMI,IAAI,GAAGzE,IAAI,CAAC0E,KAAK,CAACC,aAAa,CAACJ,SAAS,CAAC;QAEhD,MAAMK,WAAW,GAAG5C,aAAa,CAAC3B,aAAa,CAAC;QAChD,MAAMwE,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;QAC9B,MAAMC,YAAY,GAAG,EAAE;QACvB,MAAMC,aAAa,GAAG,EAAE;QAExB,KAAK,MAAMC,GAAG,IAAIR,IAAI,EAAE;UACtB,MAAMS,GAAG,GAAGD,GAAG,CAACL,WAAW,CAAC;UAC5B,IAAIM,GAAG,IAAI,IAAI,IAAIA,GAAG,KAAK,EAAE,EAAE;YAC7BF,aAAa,CAACG,IAAI,CAAC;cAAEC,MAAM,EAAE,WAAWR,WAAW,EAAE;cAAEK;YAAI,CAAC,CAAC;UAC/D,CAAC,MAAM,IAAIJ,YAAY,CAACQ,GAAG,CAACH,GAAG,CAAC,EAAE;YAChCF,aAAa,CAACG,IAAI,CAAC;cAAEC,MAAM,EAAE,sBAAsBF,GAAG,EAAE;cAAED;YAAI,CAAC,CAAC;UAClE,CAAC,MAAM;YACLJ,YAAY,CAACS,GAAG,CAACJ,GAAG,CAAC;YACrBH,YAAY,CAACI,IAAI,CAACF,GAAG,CAAC;UACxB;QACF;QAEA,IAAIF,YAAY,CAACQ,MAAM,KAAK,CAAC,EAAE;UAC7B7E,UAAU,CAAC,4DAA4D,CAAC;UACxE;QACF;QAEA,MAAM8E,YAAY,GAAG,IAAIC,QAAQ,CAAC,CAAC;QACnCD,YAAY,CAACE,MAAM,CAAC,MAAM,EAAE3B,aAAa,CAAC;QAC1CyB,YAAY,CAACE,MAAM,CAAC,OAAO,EAAErF,aAAa,CAAC;QAE3C,MAAMsF,QAAQ,GAAG,MAAM5F,KAAK,CAAC6F,IAAI,CAC/B,uCAAuC,EACvCJ,YAAY,EACZ;UACEK,OAAO,EAAE;YAAE,cAAc,EAAE;UAAsB;QACnD,CACF,CAAC;QAED,IAAI,EAAA5B,cAAA,GAAA0B,QAAQ,CAACtE,IAAI,cAAA4C,cAAA,uBAAbA,cAAA,CAAe6B,QAAQ,IAAG,CAAC,EAAE;UAC/BpF,UAAU,CACR,GAAGiF,QAAQ,CAACtE,IAAI,CAACyE,QAAQ,8BAA8B,IACpDd,aAAa,CAACO,MAAM,GACjB,IAAIP,aAAa,CAACO,MAAM,+BAA+B,GACvD,EAAE,CACV,CAAC;QACH,CAAC,MAAM;UACL7E,UAAU,CAAC,iDAAiD,CAAC;QAC/D;QAEA;MACF;;MAEA;MACA,MAAMqF,SAAS,GAAG/D,aAAa,CAAC3B,aAAa,CAAC;MAE9C,IAAI,CAACE,QAAQ,CAACwF,SAAS,CAAC,EAAE;QACxBrF,UAAU,CAAC,gBAAgBqF,SAAS,EAAE,CAAC;QACvC;MACF;MAEA,IAAI1F,aAAa,KAAK,MAAM,EAAE;QAC5B,MAAM2F,UAAU,GAAG,4BAA4B;QAC/C,IAAI,CAACzF,QAAQ,CAAC0F,KAAK,IAAI,CAACD,UAAU,CAACE,IAAI,CAAC3F,QAAQ,CAAC0F,KAAK,CAAC,EAAE;UACvDvF,UAAU,CAAC,qCAAqC,CAAC;UACjD;QACF;QACA,IAAI,CAACH,QAAQ,CAAC4F,QAAQ,IAAI,CAAC5F,QAAQ,CAAC6F,gBAAgB,EAAE;UACpD1F,UAAU,CAAC,6CAA6C,CAAC;UACzD;QACF;QACA,IAAIH,QAAQ,CAAC4F,QAAQ,KAAK5F,QAAQ,CAAC6F,gBAAgB,EAAE;UACnD1F,UAAU,CAAC,6CAA6C,CAAC;UACzD;QACF;QACA,IAAI,CAACH,QAAQ,CAAC8F,IAAI,EAAE;UAClB3F,UAAU,CAAC,uBAAuB,CAAC;UACnC;QACF;MACF;MAEA,IAAIL,aAAa,KAAK,QAAQ,EAAE;QAC9B,IAAI,CAACE,QAAQ,CAACkB,MAAM,EAAE;UACpBf,UAAU,CAAC,sBAAsB,CAAC;UAClC;QACF;QACA,IAAI,CAACH,QAAQ,CAACoB,MAAM,EAAE;UACpBjB,UAAU,CAAC,sBAAsB,CAAC;UAClC;QACF;QACA,IAAI,CAACH,QAAQ,CAACuB,OAAO,EAAE;UACrBpB,UAAU,CAAC,uBAAuB,CAAC;UACnC;QACF;MACF;MAEA,IAAIL,aAAa,KAAK,QAAQ,EAAE;QAC9B,IAAI,CAACE,QAAQ,CAACkB,MAAM,EAAE;UACpBf,UAAU,CAAC,sBAAsB,CAAC;UAClC;QACF;MACF;MAEA,IAAIL,aAAa,KAAK,SAAS,EAAE;QAC/B,IAAI,CAACE,QAAQ,CAACoB,MAAM,EAAE;UACpBjB,UAAU,CAAC,sBAAsB,CAAC;UAClC;QACF;MACF;;MAEA;MACA,IAAI4F,UAAU,GAAG;QAAE,GAAG/F;MAAS,CAAC;MAEhC,IAAIF,aAAa,KAAK,QAAQ,EAAE;QAAA,IAAAkG,gBAAA,EAAAC,qBAAA;QAC9BF,UAAU,GAAG;UACXG,MAAM,GAAAF,gBAAA,GAAEhG,QAAQ,CAACkG,MAAM,cAAAF,gBAAA,uBAAfA,gBAAA,CAAiBG,IAAI,CAAC,CAAC;UAC/BC,WAAW,GAAAH,qBAAA,GAAEjG,QAAQ,CAACoG,WAAW,cAAAH,qBAAA,uBAApBA,qBAAA,CAAsBE,IAAI,CAAC,CAAC;UACzCjF,MAAM,EAAElB,QAAQ,CAACkB,MAAM;UACvBE,MAAM,EAAEpB,QAAQ,CAACoB,MAAM;UACvBG,OAAO,EAAEvB,QAAQ,CAACuB;QACpB,CAAC;MACH,CAAC,MAAM,IAAIzB,aAAa,KAAK,QAAQ,EAAE;QAAA,IAAAuG,cAAA;QACrCN,UAAU,GAAG;UACX9D,IAAI,GAAAoE,cAAA,GAAErG,QAAQ,CAACiC,IAAI,cAAAoE,cAAA,uBAAbA,cAAA,CAAeF,IAAI,CAAC,CAAC;UAC3BjF,MAAM,EAAElB,QAAQ,CAACkB;QACnB,CAAC;MACH,CAAC,MAAM,IAAIpB,aAAa,KAAK,SAAS,EAAE;QAAA,IAAAwG,eAAA;QACtCP,UAAU,GAAG;UACX9D,IAAI,GAAAqE,eAAA,GAAEtG,QAAQ,CAACiC,IAAI,cAAAqE,eAAA,uBAAbA,eAAA,CAAeH,IAAI,CAAC,CAAC;UAC3B/E,MAAM,EAAEpB,QAAQ,CAACoB;QACnB,CAAC;MACH,CAAC,MAAM,IAAItB,aAAa,KAAK,MAAM,EAAE;QACnCiG,UAAU,GAAG;UAAE,GAAG/F;QAAS,CAAC;QAC5B,OAAO+F,UAAU,CAACF,gBAAgB;MACpC;MAEA,MAAMT,QAAQ,GAAG,MAAM5F,KAAK,CAAC6F,IAAI,CAAC,qCAAqC,EAAE;QACvEkB,KAAK,EAAEzG,aAAa;QACpBgB,IAAI,EAAEiF;MACR,CAAC,CAAC;MAEF,IAAIX,QAAQ,CAACtE,IAAI,CAAC0F,OAAO,EAAE;QACzBrG,UAAU,CAAC,2BAA2B,CAAC;QACvCF,WAAW,CAAC,CAAC,CAAC,CAAC;QACf,IAAIG,YAAY,CAACiC,OAAO,EAAE;UACxBjC,YAAY,CAACiC,OAAO,CAACH,KAAK,GAAG,IAAI;QACnC;MACF,CAAC,MAAM,IAAIkD,QAAQ,CAACtE,IAAI,CAAC2F,SAAS,EAAE;QAClCtG,UAAU,CAAC,uBAAuBqF,SAAS,KAAKxF,QAAQ,CAACwF,SAAS,CAAC,EAAE,CAAC;MACxE,CAAC,MAAM;QACLrF,UAAU,CAAC,sBAAsB,CAAC;MACpC;IACF,CAAC,CAAC,OAAOiD,GAAG,EAAE;MAAA,IAAAsD,aAAA,EAAAC,kBAAA;MACZ3F,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEqC,GAAG,CAAC;MACnCjD,UAAU,CACR,CAAAiD,GAAG,aAAHA,GAAG,wBAAAsD,aAAA,GAAHtD,GAAG,CAAEgC,QAAQ,cAAAsB,aAAA,wBAAAC,kBAAA,GAAbD,aAAA,CAAe5F,IAAI,cAAA6F,kBAAA,uBAAnBA,kBAAA,CAAqBzG,OAAO,KAC1B,6CACJ,CAAC;IACH;EACF,CAAC;EAED,oBACEP,OAAA;IAAKiH,KAAK,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAY,CAAE;IAAAC,QAAA,gBACrDpH,OAAA;MAAAoH,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE1BxH,OAAA;MAAAoH,QAAA,GAAO,eAEL,eAAApH,OAAA;QACEuC,KAAK,EAAEpC,aAAc;QACrBsH,QAAQ,EAAEhF,iBAAkB;QAC5BwE,KAAK,EAAE;UAAES,UAAU,EAAE;QAAG,CAAE;QAAAN,QAAA,gBAE1BpH,OAAA;UAAQuC,KAAK,EAAC,MAAM;UAAA6E,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAClCxH,OAAA;UAAQuC,KAAK,EAAC,QAAQ;UAAA6E,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACtCxH,OAAA;UAAQuC,KAAK,EAAC,SAAS;UAAA6E,QAAA,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxCxH,OAAA;UAAQuC,KAAK,EAAC,WAAW;UAAA6E,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC5CxH,OAAA;UAAQuC,KAAK,EAAC,QAAQ;UAAA6E,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACtCxH,OAAA;UAAQuC,KAAK,EAAC,SAAS;UAAA6E,QAAA,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxCxH,OAAA;UAAQuC,KAAK,EAAC,QAAQ;UAAA6E,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACtCxH,OAAA;UAAQuC,KAAK,EAAC,QAAQ;UAAA6E,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAERxH,OAAA;MAAKiH,KAAK,EAAE;QAAEU,SAAS,EAAE;MAAO,CAAE;MAAAP,QAAA,gBAChCpH,OAAA;QAAAoH,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAErB3E,iBAAiB,CAAC,CAAC,CAAC+E,GAAG,CAAEC,KAAK,IAAK;QAClC;QACA,IAAI1H,aAAa,KAAK,MAAM,EAAE;UAC5B,IAAI0H,KAAK,KAAK,MAAM,EAAE;YACpB,oBACE7H,OAAA;cAAiBiH,KAAK,EAAE;gBAAEa,YAAY,EAAE;cAAO,CAAE;cAAAV,QAAA,gBAC/CpH,OAAA;gBAAAoH,QAAA,GAAQS,KAAK,EAAC,GAAC;cAAA;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACvBxH,OAAA;gBACEsC,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAElC,QAAQ,CAAC8F,IAAI,IAAI,EAAG;gBAC3BsB,QAAQ,EAAErF,iBAAkB;gBAC5B6E,KAAK,EAAE;kBAAEc,KAAK,EAAE,MAAM;kBAAEC,OAAO,EAAE;gBAAE,CAAE;gBAAAZ,QAAA,gBAErCpH,OAAA;kBAAQuC,KAAK,EAAC,EAAE;kBAAA6E,QAAA,EAAC;gBAAW;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACrCxH,OAAA;kBAAQuC,KAAK,EAAC,OAAO;kBAAA6E,QAAA,EAAC;gBAAK;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACpCxH,OAAA;kBAAQuC,KAAK,EAAC,SAAS;kBAAA6E,QAAA,EAAC;gBAAO;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACxCxH,OAAA;kBAAQuC,KAAK,EAAC,MAAM;kBAAA6E,QAAA,EAAC;gBAAI;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5B,CAAC;YAAA,GAZDK,KAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAaV,CAAC;UAEV,CAAC,MAAM,IAAIK,KAAK,KAAK,UAAU,IAAIA,KAAK,KAAK,kBAAkB,EAAE;YAC/D,oBACE7H,OAAA;cAAiBiH,KAAK,EAAE;gBAAEa,YAAY,EAAE;cAAO,CAAE;cAAAV,QAAA,gBAC/CpH,OAAA;gBAAAoH,QAAA,GAAQS,KAAK,CAACI,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,GAAC;cAAA;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACzCxH,OAAA;gBACEkE,IAAI,EAAC,UAAU;gBACf5B,IAAI,EAAEuF,KAAM;gBACZtF,KAAK,EAAElC,QAAQ,CAACwH,KAAK,CAAC,IAAI,EAAG;gBAC7BJ,QAAQ,EAAErF,iBAAkB;gBAC5B6E,KAAK,EAAE;kBAAEc,KAAK,EAAE,MAAM;kBAAEC,OAAO,EAAE;gBAAE,CAAE;gBACrCE,YAAY,EAAC;cAAc;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5B,CAAC;YAAA,GATMK,KAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAUV,CAAC;UAEV,CAAC,MAAM;YACL,oBACExH,OAAA;cAAiBiH,KAAK,EAAE;gBAAEa,YAAY,EAAE;cAAO,CAAE;cAAAV,QAAA,gBAC/CpH,OAAA;gBAAAoH,QAAA,GAAQS,KAAK,EAAC,GAAC;cAAA;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACvBxH,OAAA;gBACEkE,IAAI,EAAC,MAAM;gBACX5B,IAAI,EAAEuF,KAAM;gBACZtF,KAAK,EAAElC,QAAQ,CAACwH,KAAK,CAAC,IAAI,EAAG;gBAC7BJ,QAAQ,EAAErF,iBAAkB;gBAC5B6E,KAAK,EAAE;kBAAEc,KAAK,EAAE,MAAM;kBAAEC,OAAO,EAAE;gBAAE;cAAE;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACtC,CAAC;YAAA,GARMK,KAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OASV,CAAC;UAEV;QACF;;QAEA;QACA,IAAIrH,aAAa,KAAK,QAAQ,EAAE;UAC9B,IAAI0H,KAAK,KAAK,QAAQ,EAAE;YACtB,oBACE7H,OAAA;cAAiBiH,KAAK,EAAE;gBAAEa,YAAY,EAAE;cAAO,CAAE;cAAAV,QAAA,gBAC/CpH,OAAA;gBAAAoH,QAAA,GAAQS,KAAK,EAAC,GAAC;cAAA;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACvBxH,OAAA;gBACEsC,IAAI,EAAC,QAAQ;gBACbC,KAAK,EAAElC,QAAQ,CAACkB,MAAM,IAAI,EAAG;gBAC7BkG,QAAQ,EAAErF,iBAAkB;gBAC5B6E,KAAK,EAAE;kBAAEc,KAAK,EAAE,MAAM;kBAAEC,OAAO,EAAE;gBAAE,CAAE;gBAAAZ,QAAA,gBAErCpH,OAAA;kBAAQuC,KAAK,EAAC,EAAE;kBAAA6E,QAAA,EAAC;gBAAa;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACtC9G,OAAO,CAACkH,GAAG,CAAEO,CAAC,iBACbnI,OAAA;kBAAoBuC,KAAK,EAAE4F,CAAC,CAACC,GAAI;kBAAAhB,QAAA,EAC9Be,CAAC,CAAC7F;gBAAI,GADI6F,CAAC,CAACC,GAAG;kBAAAf,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEV,CACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI,CAAC;YAAA,GAdDK,KAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAeV,CAAC;UAEV,CAAC,MAAM,IAAIK,KAAK,KAAK,QAAQ,EAAE;YAC7B,oBACE7H,OAAA;cAAiBiH,KAAK,EAAE;gBAAEa,YAAY,EAAE;cAAO,CAAE;cAAAV,QAAA,gBAC/CpH,OAAA;gBAAAoH,QAAA,GAAQS,KAAK,EAAC,GAAC;cAAA;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACvBxH,OAAA;gBACEsC,IAAI,EAAC,QAAQ;gBACbC,KAAK,EAAElC,QAAQ,CAACoB,MAAM,IAAI,EAAG;gBAC7BgG,QAAQ,EAAErF,iBAAkB;gBAC5BiG,QAAQ,EAAE,CAAChI,QAAQ,CAACkB,MAAO;gBAC3B0F,KAAK,EAAE;kBAAEc,KAAK,EAAE,MAAM;kBAAEC,OAAO,EAAE;gBAAE,CAAE;gBAAAZ,QAAA,gBAErCpH,OAAA;kBAAQuC,KAAK,EAAC,EAAE;kBAAA6E,QAAA,EAAC;gBAAa;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACtC5G,OAAO,CAACgH,GAAG,CAAEO,CAAC,iBACbnI,OAAA;kBAAoBuC,KAAK,EAAE4F,CAAC,CAACC,GAAI;kBAAAhB,QAAA,EAC9Be,CAAC,CAAC7F;gBAAI,GADI6F,CAAC,CAACC,GAAG;kBAAAf,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEV,CACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI,CAAC;YAAA,GAfDK,KAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAgBV,CAAC;UAEV,CAAC,MAAM,IAAIK,KAAK,KAAK,SAAS,EAAE;YAC9B,oBACE7H,OAAA;cAAiBiH,KAAK,EAAE;gBAAEa,YAAY,EAAE;cAAO,CAAE;cAAAV,QAAA,gBAC/CpH,OAAA;gBAAAoH,QAAA,GAAQS,KAAK,EAAC,GAAC;cAAA;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACvBxH,OAAA;gBACEsC,IAAI,EAAC,SAAS;gBACdC,KAAK,EAAElC,QAAQ,CAACuB,OAAO,IAAI,EAAG;gBAC9B6F,QAAQ,EAAErF,iBAAkB;gBAC5BiG,QAAQ,EAAE,CAAChI,QAAQ,CAACoB,MAAO;gBAC3BwF,KAAK,EAAE;kBAAEc,KAAK,EAAE,MAAM;kBAAEC,OAAO,EAAE;gBAAE,CAAE;gBAAAZ,QAAA,gBAErCpH,OAAA;kBAAQuC,KAAK,EAAC,EAAE;kBAAA6E,QAAA,EAAC;gBAAc;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACvC1G,QAAQ,CAAC8G,GAAG,CAAEO,CAAC,iBACdnI,OAAA;kBAAoBuC,KAAK,EAAE4F,CAAC,CAACC,GAAI;kBAAAhB,QAAA,EAC9Be,CAAC,CAAC7F;gBAAI,GADI6F,CAAC,CAACC,GAAG;kBAAAf,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEV,CACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI,CAAC;YAAA,GAfDK,KAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAgBV,CAAC;UAEV,CAAC,MAAM;YACL;YACA,oBACExH,OAAA;cAAiBiH,KAAK,EAAE;gBAAEa,YAAY,EAAE;cAAO,CAAE;cAAAV,QAAA,gBAC/CpH,OAAA;gBAAAoH,QAAA,GAAQS,KAAK,EAAC,GAAC;cAAA;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACvBxH,OAAA;gBACEkE,IAAI,EAAC,MAAM;gBACX5B,IAAI,EAAEuF,KAAM;gBACZtF,KAAK,EAAElC,QAAQ,CAACwH,KAAK,CAAC,IAAI,EAAG;gBAC7BJ,QAAQ,EAAErF,iBAAkB;gBAC5B6E,KAAK,EAAE;kBAAEc,KAAK,EAAE,MAAM;kBAAEC,OAAO,EAAE;gBAAE;cAAE;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACtC,CAAC;YAAA,GARMK,KAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OASV,CAAC;UAEV;QACF;;QAEA;QACA,IAAIrH,aAAa,KAAK,QAAQ,IAAI0H,KAAK,KAAK,QAAQ,EAAE;UACpD,oBACE7H,OAAA;YAAiBiH,KAAK,EAAE;cAAEa,YAAY,EAAE;YAAO,CAAE;YAAAV,QAAA,gBAC/CpH,OAAA;cAAAoH,QAAA,GAAQS,KAAK,EAAC,GAAC;YAAA;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACvBxH,OAAA;cACEsC,IAAI,EAAC,QAAQ;cACbC,KAAK,EAAElC,QAAQ,CAACkB,MAAM,IAAI,EAAG;cAC7BkG,QAAQ,EAAErF,iBAAkB;cAC5B6E,KAAK,EAAE;gBAAEc,KAAK,EAAE,MAAM;gBAAEC,OAAO,EAAE;cAAE,CAAE;cAAAZ,QAAA,gBAErCpH,OAAA;gBAAQuC,KAAK,EAAC,EAAE;gBAAA6E,QAAA,EAAC;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EACtC9G,OAAO,CAACkH,GAAG,CAAEO,CAAC,iBACbnI,OAAA;gBAAoBuC,KAAK,EAAE4F,CAAC,CAACC,GAAI;gBAAAhB,QAAA,EAC9Be,CAAC,CAAC7F;cAAI,GADI6F,CAAC,CAACC,GAAG;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACT,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACI,CAAC;UAAA,GAdDK,KAAK;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAeV,CAAC;QAEV;;QAEA;QACA,IAAIrH,aAAa,KAAK,SAAS,IAAI0H,KAAK,KAAK,QAAQ,EAAE;UACrD,oBACE7H,OAAA;YAAiBiH,KAAK,EAAE;cAAEa,YAAY,EAAE;YAAO,CAAE;YAAAV,QAAA,gBAC/CpH,OAAA;cAAAoH,QAAA,GAAQS,KAAK,EAAC,GAAC;YAAA;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACvBxH,OAAA;cACEsC,IAAI,EAAC,QAAQ;cACbC,KAAK,EAAElC,QAAQ,CAACoB,MAAM,IAAI,EAAG;cAC7BgG,QAAQ,EAAErF,iBAAkB;cAC5B6E,KAAK,EAAE;gBAAEc,KAAK,EAAE,MAAM;gBAAEC,OAAO,EAAE;cAAE,CAAE;cAAAZ,QAAA,gBAErCpH,OAAA;gBAAQuC,KAAK,EAAC,EAAE;gBAAA6E,QAAA,EAAC;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EACtC5G,OAAO,CAACgH,GAAG,CAAEO,CAAC,iBACbnI,OAAA;gBAAoBuC,KAAK,EAAE4F,CAAC,CAACC,GAAI;gBAAAhB,QAAA,EAC9Be,CAAC,CAAC7F;cAAI,GADI6F,CAAC,CAACC,GAAG;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACT,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACI,CAAC;UAAA,GAdDK,KAAK;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAeV,CAAC;QAEV;;QAEA;QACA,oBACExH,OAAA;UAAiBiH,KAAK,EAAE;YAAEa,YAAY,EAAE;UAAO,CAAE;UAAAV,QAAA,gBAC/CpH,OAAA;YAAAoH,QAAA,GAAQS,KAAK,EAAC,GAAC;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACvBxH,OAAA;YACEkE,IAAI,EAAC,MAAM;YACX5B,IAAI,EAAEuF,KAAM;YACZtF,KAAK,EAAElC,QAAQ,CAACwH,KAAK,CAAC,IAAI,EAAG;YAC7BJ,QAAQ,EAAErF,iBAAkB;YAC5B6E,KAAK,EAAE;cAAEc,KAAK,EAAE,MAAM;cAAEC,OAAO,EAAE;YAAE;UAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC;QAAA,GARMK,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASV,CAAC;MAEV,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENxH,OAAA;MACEsI,OAAO,EAAE5E,YAAa;MACtBuD,KAAK,EAAE;QACLU,SAAS,EAAE,MAAM;QACjBK,OAAO,EAAE,WAAW;QACpBO,eAAe,EAAE,SAAS;QAC1BC,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE,MAAM;QACdC,YAAY,EAAE,CAAC;QACfC,MAAM,EAAE;MACV,CAAE;MAAAvB,QAAA,EACH;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETxH,OAAA;MAAIiH,KAAK,EAAE;QAAEE,MAAM,EAAE;MAAS;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEnCxH,OAAA;MAAAoH,QAAA,gBACEpH,OAAA;QAAAoH,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BxH,OAAA;QAAOkE,IAAI,EAAC,MAAM;QAAC0E,MAAM,EAAC,aAAa;QAACC,GAAG,EAAEpI;MAAa;QAAA4G,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7DxH,OAAA;QACEsI,OAAO,EAAE5E,YAAa;QACtBuD,KAAK,EAAE;UACLU,SAAS,EAAE,MAAM;UACjBK,OAAO,EAAE,WAAW;UACpBO,eAAe,EAAE,SAAS;UAC1BC,KAAK,EAAE,OAAO;UACdC,MAAM,EAAE,MAAM;UACdC,YAAY,EAAE,CAAC;UACfC,MAAM,EAAE;QACV,CAAE;QAAAvB,QAAA,EACH;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAELjH,OAAO,iBACNP,OAAA;MACEiH,KAAK,EAAE;QACLU,SAAS,EAAE,MAAM;QACjBa,KAAK,EACHjI,OAAO,CAACuI,UAAU,CAAC,QAAQ,CAAC,IAAIvI,OAAO,CAACuI,UAAU,CAAC,QAAQ,CAAC,GACxD,KAAK,GACL;MACR,CAAE;MAAA1B,QAAA,EAED7G;IAAO;MAAA8G,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACtH,EAAA,CAxkBID,QAAQ;AAAA8I,EAAA,GAAR9I,QAAQ;AA0kBd,eAAeA,QAAQ;AAAC,IAAA8I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}