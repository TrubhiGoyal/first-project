{"ast":null,"code":"var _jsxFileName = \"H:\\\\project\\\\first-project\\\\client\\\\src\\\\AddTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddTable = () => {\n  _s();\n  const [selectedTable, setSelectedTable] = useState(\"branch\");\n  const [formData, setFormData] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const fileInputRef = useRef(null);\n\n  // Dropdown data\n  const [clients, setClients] = useState([]);\n  const [circles, setCircles] = useState([]);\n  const [clusters, setClusters] = useState([]);\n\n  // Fetch clients on mount or when switching to circle/cluster/branch\n  useEffect(() => {\n    if ([\"branch\", \"circle\", \"cluster\"].includes(selectedTable)) {\n      axios.get(\"http://localhost:8888/api/tables/client\").then(res => setClients(res.data || [])).catch(() => setClients([]));\n    } else {\n      setClients([]);\n    }\n  }, [selectedTable]);\n\n  // Fetch circles when client changes (needed for circle and branch forms)\n  useEffect(() => {\n    if (formData.client && [\"branch\", \"circle\"].includes(selectedTable)) {\n      axios.get(`http://localhost:8888/api/tables/circle?clientId=${formData.client}`).then(res => setCircles(res.data || [])).catch(() => setCircles([]));\n    } else {\n      setCircles([]);\n      if (selectedTable === \"circle\") setFormData(prev => ({\n        ...prev,\n        circle: \"\"\n      }));\n      if (selectedTable === \"branch\") setFormData(prev => ({\n        ...prev,\n        circle: \"\",\n        cluster: \"\"\n      }));\n    }\n  }, [formData.client, selectedTable]);\n\n  // Fetch clusters when circle changes (needed for cluster and branch forms)\n  useEffect(() => {\n    if (formData.circle && [\"branch\", \"cluster\"].includes(selectedTable)) {\n      axios.get(`http://localhost:8888/api/tables/cluster?circleId=${formData.circle}`).then(res => setClusters(res.data || [])).catch(() => setClusters([]));\n    } else {\n      setClusters([]);\n      if (selectedTable === \"cluster\") setFormData(prev => ({\n        ...prev,\n        cluster: \"\"\n      }));\n      if (selectedTable === \"branch\") setFormData(prev => ({\n        ...prev,\n        cluster: \"\"\n      }));\n    }\n  }, [formData.circle, selectedTable]);\n  const UNIQUE_FIELDS = {\n    user: \"email\",\n    branch: \"sol_id\",\n    vehicle: \"name\",\n    custodian: \"name\",\n    driver: \"name\",\n    cluster: \"name\",\n    circle: \"name\",\n    client: \"name\"\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleTableChange = e => {\n    const newTable = e.target.value;\n    setSelectedTable(newTable);\n    setFormData({});\n    setMessage(\"\");\n    if (fileInputRef.current) fileInputRef.current.value = null;\n  };\n  const getFieldsForTable = () => {\n    switch (selectedTable) {\n      case \"user\":\n        return [\"name\", \"email\", \"password\", \"confirm_password\", \"role\"];\n      case \"branch\":\n        return [\"sol_id\", \"branch_name\", \"client\", \"circle\", \"cluster\"];\n      case \"circle\":\n        return [\"name\", \"client\"];\n      case \"cluster\":\n        return [\"name\", \"circle\"];\n      case \"vehicle\":\n      case \"custodian\":\n      case \"driver\":\n      case \"client\":\n        return [\"name\"];\n      default:\n        return [];\n    }\n  };\n\n  // handleSubmit logic unchanged - just remember to send circle for cluster and client for circle\n\n  // In your submit function, when sending cluster or circle data,\n  // make sure to send circle (for cluster) and client (for circle) properly.\n\n  // Render inputs according to table and field:\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: \"20px auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Data to Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Choose Table:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedTable,\n        onChange: handleTableChange,\n        style: {\n          marginLeft: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"user\",\n          children: \"User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"branch\",\n          children: \"Branch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"vehicle\",\n          children: \"Vehicle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"custodian\",\n          children: \"Custodian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"driver\",\n          children: \"Driver\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cluster\",\n          children: \"Cluster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"circle\",\n          children: \"Circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"client\",\n          children: \"Client\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Manual Entry:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), getFieldsForTable().map(field => {\n        // Special cases for circle and cluster\n\n        if (selectedTable === \"circle\" && field === \"client\") {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: 10\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Client:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"client\",\n              value: formData.client || \"\",\n              onChange: handleInputChange,\n              style: {\n                width: \"100%\",\n                padding: 6\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Client\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), clients.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: c._id,\n                children: c.name\n              }, c._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)]\n          }, field, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this);\n        }\n        if (selectedTable === \"cluster\" && field === \"circle\") {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: 10\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Circle:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"circle\",\n              value: formData.circle || \"\",\n              onChange: handleInputChange,\n              style: {\n                width: \"100%\",\n                padding: 6\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 19\n              }, this), circles.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: c._id,\n                children: c.name\n              }, c._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this)]\n          }, field, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this);\n        }\n\n        // For other fields in circle or cluster (like name), render input\n        if (selectedTable === \"circle\" && field === \"name\" || selectedTable === \"cluster\" && field === \"name\") {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: 10\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              value: formData.name || \"\",\n              onChange: handleInputChange,\n              style: {\n                width: \"100%\",\n                padding: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this)]\n          }, field, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this);\n        }\n\n        // Default render for other tables & fields (like branch, user, etc.)\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [field, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: field,\n            value: formData[field] || \"\",\n            onChange: handleInputChange,\n            style: {\n              width: \"100%\",\n              padding: 6\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)]\n        }, field, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        style: {\n          marginTop: 10,\n          padding: \"10px 16px\",\n          backgroundColor: \"#007bff\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: 6,\n          cursor: \"pointer\"\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: 20,\n        color: message.startsWith(\"Failed\") ? \"red\" : \"green\"\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(AddTable, \"fw4kcXIXAiEQujYzkGHkDm7JbSs=\");\n_c = AddTable;\nexport default AddTable;\nvar _c;\n$RefreshReg$(_c, \"AddTable\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","XLSX","jsxDEV","_jsxDEV","AddTable","_s","selectedTable","setSelectedTable","formData","setFormData","message","setMessage","fileInputRef","clients","setClients","circles","setCircles","clusters","setClusters","includes","get","then","res","data","catch","client","prev","circle","cluster","UNIQUE_FIELDS","user","branch","vehicle","custodian","driver","handleInputChange","e","name","value","target","handleTableChange","newTable","current","getFieldsForTable","style","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","marginLeft","marginTop","map","field","marginBottom","width","padding","c","_id","type","onClick","handleSubmit","backgroundColor","color","border","borderRadius","cursor","startsWith","_c","$RefreshReg$"],"sources":["H:/project/first-project/client/src/AddTable.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst AddTable = () => {\r\n  const [selectedTable, setSelectedTable] = useState(\"branch\");\r\n  const [formData, setFormData] = useState({});\r\n  const [message, setMessage] = useState(\"\");\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Dropdown data\r\n  const [clients, setClients] = useState([]);\r\n  const [circles, setCircles] = useState([]);\r\n  const [clusters, setClusters] = useState([]);\r\n\r\n  // Fetch clients on mount or when switching to circle/cluster/branch\r\n  useEffect(() => {\r\n    if ([\"branch\", \"circle\", \"cluster\"].includes(selectedTable)) {\r\n      axios.get(\"http://localhost:8888/api/tables/client\")\r\n        .then(res => setClients(res.data || []))\r\n        .catch(() => setClients([]));\r\n    } else {\r\n      setClients([]);\r\n    }\r\n  }, [selectedTable]);\r\n\r\n  // Fetch circles when client changes (needed for circle and branch forms)\r\n  useEffect(() => {\r\n    if (formData.client && [\"branch\", \"circle\"].includes(selectedTable)) {\r\n      axios.get(`http://localhost:8888/api/tables/circle?clientId=${formData.client}`)\r\n        .then(res => setCircles(res.data || []))\r\n        .catch(() => setCircles([]));\r\n    } else {\r\n      setCircles([]);\r\n      if (selectedTable === \"circle\") setFormData(prev => ({ ...prev, circle: \"\" }));\r\n      if (selectedTable === \"branch\") setFormData(prev => ({ ...prev, circle: \"\", cluster: \"\" }));\r\n    }\r\n  }, [formData.client, selectedTable]);\r\n\r\n  // Fetch clusters when circle changes (needed for cluster and branch forms)\r\n  useEffect(() => {\r\n    if (formData.circle && [\"branch\", \"cluster\"].includes(selectedTable)) {\r\n      axios.get(`http://localhost:8888/api/tables/cluster?circleId=${formData.circle}`)\r\n        .then(res => setClusters(res.data || []))\r\n        .catch(() => setClusters([]));\r\n    } else {\r\n      setClusters([]);\r\n      if (selectedTable === \"cluster\") setFormData(prev => ({ ...prev, cluster: \"\" }));\r\n      if (selectedTable === \"branch\") setFormData(prev => ({ ...prev, cluster: \"\" }));\r\n    }\r\n  }, [formData.circle, selectedTable]);\r\n\r\n  const UNIQUE_FIELDS = {\r\n    user: \"email\",\r\n    branch: \"sol_id\",\r\n    vehicle: \"name\",\r\n    custodian: \"name\",\r\n    driver: \"name\",\r\n    cluster: \"name\",\r\n    circle: \"name\",\r\n    client: \"name\",\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleTableChange = (e) => {\r\n    const newTable = e.target.value;\r\n    setSelectedTable(newTable);\r\n    setFormData({});\r\n    setMessage(\"\");\r\n    if (fileInputRef.current) fileInputRef.current.value = null;\r\n  };\r\n\r\n  const getFieldsForTable = () => {\r\n    switch (selectedTable) {\r\n      case \"user\":\r\n        return [\"name\", \"email\", \"password\", \"confirm_password\", \"role\"];\r\n      case \"branch\":\r\n        return [\"sol_id\", \"branch_name\", \"client\", \"circle\", \"cluster\"];\r\n      case \"circle\":\r\n        return [\"name\", \"client\"];\r\n      case \"cluster\":\r\n        return [\"name\", \"circle\"];\r\n      case \"vehicle\":\r\n      case \"custodian\":\r\n      case \"driver\":\r\n      case \"client\":\r\n        return [\"name\"];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  // handleSubmit logic unchanged - just remember to send circle for cluster and client for circle\r\n\r\n  // In your submit function, when sending cluster or circle data,\r\n  // make sure to send circle (for cluster) and client (for circle) properly.\r\n\r\n  // Render inputs according to table and field:\r\n  return (\r\n    <div style={{ maxWidth: 600, margin: \"20px auto\" }}>\r\n      <h2>Add Data to Table</h2>\r\n\r\n      <label>\r\n        Choose Table:\r\n        <select value={selectedTable} onChange={handleTableChange} style={{ marginLeft: 10 }}>\r\n          <option value=\"user\">User</option>\r\n          <option value=\"branch\">Branch</option>\r\n          <option value=\"vehicle\">Vehicle</option>\r\n          <option value=\"custodian\">Custodian</option>\r\n          <option value=\"driver\">Driver</option>\r\n          <option value=\"cluster\">Cluster</option>\r\n          <option value=\"circle\">Circle</option>\r\n          <option value=\"client\">Client</option>\r\n        </select>\r\n      </label>\r\n\r\n      <div style={{ marginTop: 20 }}>\r\n        <h4>Manual Entry:</h4>\r\n\r\n        {getFieldsForTable().map((field) => {\r\n          // Special cases for circle and cluster\r\n\r\n          if (selectedTable === \"circle\" && field === \"client\") {\r\n            return (\r\n              <div key={field} style={{ marginBottom: 10 }}>\r\n                <label>Client:</label>\r\n                <select\r\n                  name=\"client\"\r\n                  value={formData.client || \"\"}\r\n                  onChange={handleInputChange}\r\n                  style={{ width: \"100%\", padding: 6 }}\r\n                >\r\n                  <option value=\"\">Select Client</option>\r\n                  {clients.map((c) => (\r\n                    <option key={c._id} value={c._id}>\r\n                      {c.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            );\r\n          }\r\n\r\n          if (selectedTable === \"cluster\" && field === \"circle\") {\r\n            return (\r\n              <div key={field} style={{ marginBottom: 10 }}>\r\n                <label>Circle:</label>\r\n                <select\r\n                  name=\"circle\"\r\n                  value={formData.circle || \"\"}\r\n                  onChange={handleInputChange}\r\n                  style={{ width: \"100%\", padding: 6 }}\r\n                >\r\n                  <option value=\"\">Select Circle</option>\r\n                  {circles.map((c) => (\r\n                    <option key={c._id} value={c._id}>\r\n                      {c.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            );\r\n          }\r\n\r\n          // For other fields in circle or cluster (like name), render input\r\n          if (\r\n            (selectedTable === \"circle\" && field === \"name\") ||\r\n            (selectedTable === \"cluster\" && field === \"name\")\r\n          ) {\r\n            return (\r\n              <div key={field} style={{ marginBottom: 10 }}>\r\n                <label>Name:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={formData.name || \"\"}\r\n                  onChange={handleInputChange}\r\n                  style={{ width: \"100%\", padding: 6 }}\r\n                />\r\n              </div>\r\n            );\r\n          }\r\n\r\n          // Default render for other tables & fields (like branch, user, etc.)\r\n          return (\r\n            <div key={field} style={{ marginBottom: 10 }}>\r\n              <label>{field}:</label>\r\n              <input\r\n                type=\"text\"\r\n                name={field}\r\n                value={formData[field] || \"\"}\r\n                onChange={handleInputChange}\r\n                style={{ width: \"100%\", padding: 6 }}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        <button\r\n          onClick={handleSubmit}\r\n          style={{\r\n            marginTop: 10,\r\n            padding: \"10px 16px\",\r\n            backgroundColor: \"#007bff\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            borderRadius: 6,\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n\r\n      {/* Your file upload section unchanged */}\r\n\r\n      {message && (\r\n        <p style={{ marginTop: 20, color: message.startsWith(\"Failed\") ? \"red\" : \"green\" }}>\r\n          {message}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}